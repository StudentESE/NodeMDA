#!/usr/bin/env node
'use strict';

const program = require('commander');
const NodeMDA = require('nodemda');
const path = require('path');
const fsx = require('fs-extra');
const winston = require('winston');


program
   .version('1.0.0');


program
   .command('generate')
   .alias("gen")
   .usage("nodemda generate [options]")
   .description("Generate code from the specified model file")
   .option('-p, --platform <platformName>','Name of the platform plugin to use')
   .option('-o, --output <outputDirectory>','The output directory')
   .option('-r, --reader <readerModuleName>','Name of a module that will act as the NodeMDA.Reader')
   .option('-m, --model <modelFileName>', 'The name of the UML model to process')
   .option('-l, --log <logLevel>', 'The name of the Winston log level to display during code generation')
   .option('--forceOverwrite','Causes NodeMDA to overwrite ALL files as if the project were new')
   .action(function(cmd) {

   				NodeMDA.loadOptions();

                if (cmd.platform) {
                    NodeMDA.Options.platform = cmd.platform; 
				}
				
				if (cmd.output) {
					NodeMDA.Options.output = cmd.output;				
				}

				if (cmd.reader) {
					NodeMDA.Options.readerName = cmd.reader;
				}

				if (cmd.model) {
					NodeMDA.Options.modelFileName = cmd.model;
				}

				if (cmd.forceOverwrite) {
					NodeMDA.Options.forceOverwrite = true;				
				}

				if (cmd.logLevel) {
					winston.level = cmd.logLevel;				
				}

				NodeMDA.Meta.Reader = require(NodeMDA.Options.readerName);			
				
    			NodeMDA.gen(NodeMDA.Options.modelFileName);
			});

program
	.command('init')
    .description("Initialize current directory for project development")
    .option('-p, --platform <platformName>','Name of the platform plugin to use')
    .option('-o, --output <outputDirectory>','The output directory')
    .option('-r, --reader <readerModuleName>','Name of a module that will act as the NodeMDA.Reader')
    .option('-m, --model <modelFileName>')
	.action(function(cmd) {

        if (cmd.platform) {
            NodeMDA.Options.platform = cmd.platform; 
		}
		
		if (cmd.output) {
			NodeMDA.Options.output = cmd.output;				
		}

		if (cmd.reader) {
			NodeMDA.Options.readerName = cmd.reader;
		}

		if (cmd.model) {
			NodeMDA.Options.modelFileName = cmd.model;
		}


		NodeMDA.writeOptions();
		console.log('Options saved to nodemda.json');

		console.log('TODO: Initialize the project by creating a model dir and copying model from the platform');
	});


program
	.command('dirs')
    .description("Shows the absolute paths to the directories that NodeMDA will use when generating code.")
    .option('-p, --platform <platformName>','Name of the platform plugin to use')
    .option('-o, --output <outputDirectory>','The output directory')
    .option('-m, --model <modelFileName>')
	.action(function(cmd) {

		NodeMDA.loadOptions();

        if (cmd.platform) {
            NodeMDA.Options.platform = cmd.platform; 
		}

		if (cmd.output) {
			NodeMDA.Options.output = cmd.output;				
		}

		if (cmd.model) {
			NodeMDA.Options.modelFileName = cmd.model;
		}


		console.log(`Current working directory is ${process.cwd()}`);
		console.log(`This nodemda CLI is running from ${__dirname}`);
		console.log(`NodeMDA is running from ${NodeMDA.getNodeMDADir()}`);

		try {
		   console.log(`The platform ${NodeMDA.Options.platform} is located at ${NodeMDA.getPlatformDir()}`);
		}
		catch (error) {
			console.log(`\n\n**ERROR** - can not use platform plugin ${NodeMDA.Options.platform}: ${error.message}\n\n`);
		}

		if (NodeMDA.Options.modelFileName) {
			let modelPath = path.resolve(NodeMDA.Options.modelFileName);
			if (fsx.existsSync(modelPath)) {
				console.log(`UML model is located at ${modelPath}`);
		    }
		    else {
				console.log(`\n\n**ERROR** - the UML model location does not exist! Not found at ${modelPath}`);
		    }
		}
		else {
			console.log('\n\n**ERROR** - no UML model file name specified.');
		}

	    let outputPath = path.resolve(NodeMDA.Options.output);
		if (fsx.existsSync(outputPath)) {
			console.log(`Output will be written to ${outputPath}`);
		}
		else {
			console.log(`\n\n**ERROR** - the output directory does not exist! Not found at ${outputPath}`);
		}

	});


program.parse(process.argv);


if (!process.argv.slice(2).length) {
   program.outputHelp();
}
