##output preserve {{@root.output}}/test/services/{{class.packageDirName}}/{{class.name}}/index.test.js
'use strict';

const chai = require('chai');
const chaiHttp = require('chai-http');
const chaiAsPromised = require('chai-as-promised');
const assert = require('assert');
const app = require('../../../../src/app');
const authentication = require('feathers-authentication/client');
const bodyParser = require('body-parser');
const MockUsers = require('../../../MockUsers.js');

const {{class.name}}Dao = app.service('/{{class.packageDirName}}{{class.name}}');
 

//config for app to do authentication
app
  .use(bodyParser.json())
  .use(bodyParser.urlencoded({ extended: true }))
  .configure(authentication());

// Add useful plugins to Chai
chai.use(chaiHttp);
chai.use(chaiAsPromised);

//use should
var should = chai.should();
var expect = chai.expect;

describe('{{class.name}} service', function() {


  const mockAdminUser = MockUsers.mockAdminUser;
  const mockUser1 = MockUsers.mockUser1;
  const mockUser2 = MockUsers.mockUser2;
  var adminUser, user1, user2,
      adminAuthToken, user1AuthToken, user2AuthToken;

  const mock{{class.name}}1 = {{class.outputMockRecord}}

  const mock{{class.name}}2 = {{class.outputMockRecord}}

  // Before running the tests, setup the test environment...
  before(function(done) {

    //start the server
    this.server = app.listen(3030);

    //once listening do the following
    this.server.once('listening', () => {

       MockUsers.CreateMockUsers(chai)

		  .then(function() {
    			return Promise.all([
    				// Create mock {{class.name}} entities...
   			    {{class.name}}Dao.create(Object.assign({}, mock{{class.name}}1, { ownerUserId: MockUsers.user1._id })),
{{#if class.isUserOwned}}            
   			    {{class.name}}Dao.create(Object.assign({}, mock{{class.name}}2, { ownerUserId: MockUsers.user2._id })),
{{/if}}            
    	    ]);
      })

      .then(
          function(res) {
             adminUser = MockUsers.adminUser;
             user1 = MockUsers.user1;
             user2 = MockUsers.user2;
             adminAuthToken = MockUsers.adminAuthToken;
             user1AuthToken = MockUsers.user1AuthToken;
             user2AuthToken = MockUsers.user2AuthToken;
             done();
          },

          function(err) {
            done(err);
          }
      );

    });

  });


  //teardown after tests
  after(function() {

    const server = this.server;

    // delete the mock data from mongodb
    return Promise.all([
      {{class.name}}Dao.remove(null)

    ])
    .then(function() {
        return MockUsers.CleanupMockUsers();
    })

    .then(function() {
        server.close(function() {});
    });

  });


  it('registered the {{class.name}} service', function() {
    assert.ok(app.service('/{{class.packageDirName}}{{class.name}}'));
  });



  it('should return only one value for user 1 get request', function(done) {

          chai.request(app)
          //request to /{{class.name}} from user1
          .get('/{{class.packageDirName}}{{class.name}}')
          .set('Accept', 'application/json')
          .set('Authorization', 'Bearer '.concat(MockUsers.user1AuthToken))
          .end((err, res) => {
          	  // Check that the returned results are as expected.
              res.body.data.should.be.a('array');
              res.body.data.should.have.length(1);
              res.body.data[0].should.have.property('{{class.attributes.0.jsIdentifierName}}');
              res.body.data[0].{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}1.{{class.attributes.0.jsIdentifierName}});
              done();
            });
  });

{{#if class.isUserOwned}} 
  it('should return only one value for user 2 get request', function(done) {

          chai.request(app)
          //request to /{{class.name}} from user1
          .get('/{{class.packageDirName}}{{class.name}}')
          .set('Accept', 'application/json')
          .set('Authorization', 'Bearer '.concat(MockUsers.user2AuthToken))
          .end((err, res) => {
          	  // Check that the returned results are as expected.
              res.body.data.should.be.a('array');
              res.body.data[0].should.have.property('{{class.attributes.0.jsIdentifierName}}');
              res.body.data[0].{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});
              res.body.data.should.have.length(1);
              done();
            });
  });
{{/if}}

  it('should deny access for unauthenticated user', function() {

          console.log('Expecting 401');
          return chai.request(app)
	          //request to /{{class.name}} from user1
	          .get('/{{class.packageDirName}}{{class.name}}')
	          .set('Accept', 'application/json')
	          .then(
	              function(res) {
	              	  throw new Error('Access should have been denied for unauthenticated user.');
	              },

	              function(err) {
	          	      // This operation should be unauthorized.
                    expect(err).to.have.status(401); 
	          	  }
	            );

	          
  });



  it('should perform full CRUD for none unique entity', function() {

 	    var lastEntity;

  		return chai.request(app)

  			// First, test the create() method...
  			.post('/{{class.packageDirName}}{{class.name}}')
        	.set('Accept', 'application/json')
        	.set('Authorization', 'Bearer '.concat(user1AuthToken))

        	// Add the same value as user 2's {{class.name}} (and try an extra field not found in model )
        	.send(Object.assign({}, mock{{class.name}}2, { badField: 'bad' }))

        	.then(function(res) {
        		expect(res).to.have.status(201);
        		res.body.should.have.property('{{class.attributes.0.jsIdentifierName}}');
        		res.body.{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});
        		res.body.should.have.property('ownerUserId');
        		res.body.ownerUserId.should.equal(user1._id.toString());

        		// Make sure that "extra" field is not part of the final entity...
        		res.body.should.not.have.property('badField');

        		// Now, try to find {{class.attributes.0.jsIdentifierName}}Value2.  We should only get OUR {{class.attributes.0.jsIdentifierName}}Value2...
        		return chai.request(app)
        				.get('/{{class.packageDirName}}{{class.name}}')
        				.query( { {{class.attributes.0.jsIdentifierName}}: mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}} } )
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(user1AuthToken));
        	})
{{#if class.isUserOwned}}
        	.then(function(res) {
        		// Even though there are now 2 entries for mock{{class.name}}2 in the db, user1
        		// only "owns", one of them, so this should have have a single entry returned.
	            res.body.data.should.be.a('array');
	            res.body.data.should.have.length(1);
	            res.body.data[0].should.have.property('{{class.attributes.0.jsIdentifierName}}');
	            res.body.data[0].{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});

	            // Try to update the field...
	            lastEntity = res.body.data[0];
	            lastEntity.{{class.attributes.0.jsIdentifierName}} = mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}} + '-update';

	            // Also try sending a bad field, and removing our ownerUserId...
	            lastEntity.badField = 'wrong';
	            lastEntity.ownerUserId = undefined;
        		return chai.request(app)
        				.put('/{{class.packageDirName}}{{class.name}}/' + lastEntity._id)
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(user1AuthToken))
				        .send(lastEntity);
        	})

{{/if}}
        	.then(function(res) {
        		expect(res).to.have.status(200);
        		res.body.should.have.property('{{class.attributes.0.jsIdentifierName}}');
        		res.body.{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}} + '-update');

{{#if class.isUserOWned}}
        		// Do we still have the owner id?
        		res.body.should.have.property('ownerUserId');
        		res.body.ownerUserId.should.equal(user1._id.toString());

{{/if}}
        		// Make sure that "extra" field is not part of the final entity...
        		res.body.should.not.have.property('badField');

        		lastEntity = res.body;

        		// Now, try to remove the entity...
        		return chai.request(app)
        				.delete('/{{class.packageDirName}}{{class.name}}/' + lastEntity._id)
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(user1AuthToken));
        	})

        	.then(function(res) {
        		expect(res).to.have.status(200);

	            // Try to retrieve it now that its gone...
            console.log('Expecting 404');
        		return chai.request(app)
        				.get('/{{class.packageDirName}}{{class.name}}/' + lastEntity._id)
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(user1AuthToken));
        	})

        	.then(
        		function(res) {
        			throw new Error('Retrieval of deleted entity should have failed.');
        		},

        		function(err) {
        			// This is the correct successful path - to have failed to retrieve the deleted entity.
        			expect(err).to.have.status(404);
        		}
        	);



  });

{{#if class.isUserOwned}}
  it('should deny update of unowned entity', function() {

        console.log('Expecting 403');
        return chai.request(app)
        	// Retrieve the entity owned by user #2
        	.get('/{{class.packageDirName}}{{class.name}}')
        	.set('Accept', 'application/json')
        	.set('Authorization', 'Bearer '.concat(user2AuthToken))

        	.then(function(res) {
	         	// Check that the returned results are as expected.
	            res.body.data.should.be.a('array');
	            res.body.data[0].should.have.property('{{class.attributes.0.jsIdentifierName}}');
	            res.body.data[0].{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});
        		  res.body.data[0].should.have.property('ownerUserId');
        		  res.body.data[0].ownerUserId.should.equal(user2._id.toString());
	            res.body.data.should.have.length(1);

	            let entity = res.body.data[0];

	            // Now, attempt to "steal" it via an update using user 1's credentials...
	            entity.ownerUserId = user1._id;
	            entity.{{class.attributes.0.jsIdentifierName}} = mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}} + '-update';

        		return chai.request(app)
        				.put('/{{class.packageDirName}}{{class.name}}/' + entity._id)
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(user1AuthToken))
				        .send(entity);
            })

        	.then(
        		function(res) {
              throw new Error('Update of unowned entity should have failed.');
        		},

        		function(err) {
        			// This is the correct successful path - to have failed to update the unowned entity.
              expect(err).to.have.status(403);
        		}
        	);

  });



  it('should deny admin update of unowned entity', function() {

        console.log('Expecting 401');
        return chai.request(app)
        	// Retrieve the entity owned by user #2
        	.get('/{{class.packageDirName}}{{class.name}}')
        	.set('Accept', 'application/json')
        	.set('Authorization', 'Bearer '.concat(user2AuthToken))

        	.then(function(res) {
	         	// Check that the returned results are as expected.
	            res.body.data.should.be.a('array');
	            res.body.data[0].should.have.property('{{class.attributes.0.jsIdentifierName}}');
	            res.body.data[0].{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});
        		  res.body.data[0].should.have.property('ownerUserId');
        		  res.body.data[0].ownerUserId.should.equal(user2._id.toString());
	            res.body.data.should.have.length(1);

	            let entity = res.body.data[0];

	            // Now, attempt to "steal" it via an update using user 1's credentials...
	            entity.{{class.attributes.0.jsIdentifierName}} = mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}} + '-update';

        		return chai.request(app)
        				.put('/{{class.packageDirName}}{{class.name}}/' + entity._id)
				        .set('Accept', 'application/json')
				        .set('Authorization', 'Bearer '.concat(adminAuthToken))
				        .send(entity);
            })

        	.then(
        		function(res) {
        			throw new Error('Update of unowned entity should have failed.');
        		},

        		function(err) {
        			// This is the correct successful path - to have failed to update the unowned entity.
        			expect(err).to.have.status(403);
        		}
        	);

  });

{{/if}}
  it('Test real time communication', function() {

  	    var created{{class.name}};

  	    {{class.name}}Dao.on('created', function(contact) {
  	    	created{{class.name}} = contact;
  	    });

  		return chai.request(app)

  			// First, test the create() method...
  			.post('/{{class.packageDirName}}{{class.name}}')
        	.set('Accept', 'application/json')
        	.set('Authorization', 'Bearer '.concat(user1AuthToken))

        	// Add the same value as user 2's {{class.name}} (and try an extra field not found in model )
        	.send(Object.assign({}, mock{{class.name}}2, { badField: 'bad' }))

        	.then(function(res) {
        		expect(res).to.have.status(201);
        		res.body.should.have.property('{{class.attributes.0.jsIdentifierName}}');
        		res.body.{{class.attributes.0.jsIdentifierName}}.should.equal(mock{{class.name}}2.{{class.attributes.0.jsIdentifierName}});
{{#if class.isUserOwned}}            
        		res.body.should.have.property('ownerUserId');
        		res.body.ownerUserId.should.equal(user1._id.toString());

{{/if}}            
        		// Make sure that "extra" field is not part of the final entity...
        		res.body.should.not.have.property('badField');

        		assert(typeof(created{{class.name}}) !== 'undefined');
        		assert.equal(res.body.{{class.attributes.0.jsIdentifierName}}, created{{class.name}}.{{class.attributes.0.jsIdentifierName}});
        		assert.equal(res.body.ownerUserId, created{{class.name}}.ownerUserId);
        		assert.equal(res.body._id, created{{class.name}}._id);
        	});

	});


});
