##output overwrite {{@root.output}}/src/services/{{class.requireImportPath}}/index.js
'use strict';

const hooks = require('./hooks');
const errors = require('feathers-errors');
const {{class.name}}Impl = require('./{{class.name}}Impl');
const Joi = require('joi');


// WARNING - This file was auto-generated by the Featers-React plugin of NodeMDA, and is marked
// to generate again if NodeMDA is run again. You should not have to change anything in this
// file.  Instead, modify the file {{class.name}}Impl.js

{{#with class as |class|}}
class ServiceThunk {

  constructor(options) {

    {{#each operations as |fn|}}
    {{#if fn.hasParameters}}
    this.{{fn.name}}Signature = {
     {{#each fn.parameters as |param|}}
        {{param.name}}: {{param.joiDefinition}},
     {{/each}}
    };

    {{/if}}
    {{/each}}
  }

  setup(app) {
    this.serviceImpl = new {{class.name}}Impl(app);
  }


  get(id, feathersParams) {
    return this.call(feathersParams.query, feathersParams);
  }


  create(data, feathersParams) {
    return this.call(data, feathersParams);
  }

{{#if class.hasOperationsWithParams}}
  checkParams(params, methodSignature) {

     let validated = Joi.validate(params, methodSignature);
     if (validated.error !== null) {
         throw new errors.BadRequest(validated.error.details[0].message);
     }

     return validated.value;
  }
{{/if}}

  call(opParams, feathersParams) {

{{#if class.hasOperationsWithParams}}
    let validatedParams;
{{/if}}    
    feathersParams.Model = this.Model;

    if (!feathersParams.op) {
      throw new errors.BadRequest('No operation specified for {{class.name}}');
    }

    switch (feathersParams.op) {

    {{#each operations as |fn|}}
        case '{{fn.name}}':
          {{#if fn.hasParameters}}
            validatedParams = this.checkParams(opParams, this.{{fn.name}}Signature);
          {{/if}}
            return Promise.resolve(this.serviceImpl.{{fn.name}}({{#if fn.hasParameters}}validatedParams, {{/if}}feathersParams));

    {{/each}}
    } // switch

    throw new errors.NotFound('Unknown operation: {{class.name}}.' + feathersParams.op);
  }

}

module.exports = function(){
  const app = this;

  // Initialize our service 
  app.use('{{class.expressServicePath}}', new ServiceThunk());

  // Get our initialize service to that we can bind hooks
  const {{class.name}} = app.service('{{class.expressServicePath}}');

  // Set up our before hooks
  {{class.name}}.before(hooks.before);

  // Set up our after hooks
  {{class.name}}.after(hooks.after);
};

module.exports.Service = ServiceThunk;
{{/with}}
