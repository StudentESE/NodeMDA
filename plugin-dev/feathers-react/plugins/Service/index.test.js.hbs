##output preserve {{@root.output}}/test/services/{{class.packageDirName}}/{{class.name}}/index.test.js
'use strict';

const chai = require('chai');
const chaiHttp = require('chai-http');
const chaiAsPromised = require('chai-as-promised');
const assert = require('assert');
const app = require('../../../../src/app');
const authentication = require('feathers-authentication/client');
const bodyParser = require('body-parser');
const MockUsers = require('../../../MockUsers.js');


//config for app to do authentication
app
  .use(bodyParser.json())
  .use(bodyParser.urlencoded({ extended: true }))
  .configure(authentication());

// Add useful plugins to Chai
chai.use(chaiHttp);
chai.use(chaiAsPromised);

//use should
var should = chai.should();
var expect = chai.expect;

describe('{{class.name}} service', function() {

	let authToken;

	before(function(done) {

		//start the server
		this.server = app.listen(3030);

		//once listening, create mock users...
		this.server.once('listening', () => {

			MockUsers.CreateMockUsers(chai)

			.then(function() {
				// Login mock user 1 and get an authentication token...
				const loginCredentials = { email: MockUsers.mockUser1.email, password: MockUsers.mockUser1.password };

				return chai.request(app)
					.post('/auth/local')
					.set('Accept', 'application/json')
					.send(loginCredentials);
			})

			.then(function(res) {
				// Save the authentication token for use by the individual tests
				authToken = res.body.token;
				done();
			});

		});
	});


	after(function() {
		const server = this.server;

		// delete the mock data from mongodb
		return Promise.all([
			MockUsers.CleanupMockUsers()
		]).then(function() {
			server.close(function() {});
		});
	});



	it('registered the {{class.name}} service', () => {
		assert.ok(app.service('/{{class.packageDirName}}/{{class.name}}/:op'));
	});


{{#with class as |class|}}
    {{#each operations as |fn|}}
	/**
	 * @todo Implement test for {{class.name}}.{{fn.name}}()
	 */
	it.skip('Test {{class.name}}.{{fn.name}}()', function() {

		return chai.request(app)
			.post('/{{class.packageDirName}}/{{class.name}}/{{fn.name}}')
			.set('Accept', 'application/json')
			.set('Authorization', 'Bearer '.concat(authToken))
			.send(Object.assign({}, { 
         						{{#each fn.parameters as |param|}}
										{{param.name}}: {{param.mockValue}}, 
								{{/each}}
									}))

        .then(
			function(res) {
				expect(res).to.have.status(201);
			}
		);
	});

	{{/each}}
{{/with}}
});
